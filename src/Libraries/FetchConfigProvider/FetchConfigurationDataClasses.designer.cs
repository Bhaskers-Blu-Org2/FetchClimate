#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Research.Science.FetchClimate2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FetchClimate2Configuration")]
	public partial class FetchConfigurationDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDataSource(DataSource instance);
    partial void UpdateDataSource(DataSource instance);
    partial void DeleteDataSource(DataSource instance);
    partial void InsertVariableMappingHistory(VariableMappingHistory instance);
    partial void UpdateVariableMappingHistory(VariableMappingHistory instance);
    partial void DeleteVariableMappingHistory(VariableMappingHistory instance);
    partial void InsertDataSourcesHistory(DataSourcesHistory instance);
    partial void UpdateDataSourcesHistory(DataSourcesHistory instance);
    partial void DeleteDataSourcesHistory(DataSourcesHistory instance);
    partial void InsertEnvironmentalVariable(EnvironmentalVariable instance);
    partial void UpdateEnvironmentalVariable(EnvironmentalVariable instance);
    partial void DeleteEnvironmentalVariable(EnvironmentalVariable instance);
    partial void InsertFetchEngineHistory(FetchEngineHistory instance);
    partial void UpdateFetchEngineHistory(FetchEngineHistory instance);
    partial void DeleteFetchEngineHistory(FetchEngineHistory instance);
    #endregion
		
		public FetchConfigurationDataClassesDataContext() : 
				base(global::Microsoft.Research.Science.FetchClimate2.Properties.Settings.Default.FetchClimate2ConfigurationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FetchConfigurationDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FetchConfigurationDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FetchConfigurationDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FetchConfigurationDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DataSource> DataSources
		{
			get
			{
				return this.GetTable<DataSource>();
			}
		}
		
		public System.Data.Linq.Table<VariableMappingHistory> VariableMappingHistories
		{
			get
			{
				return this.GetTable<VariableMappingHistory>();
			}
		}
		
		public System.Data.Linq.Table<DataSourcesHistory> DataSourcesHistories
		{
			get
			{
				return this.GetTable<DataSourcesHistory>();
			}
		}
		
		public System.Data.Linq.Table<EnvironmentalVariable> EnvironmentalVariables
		{
			get
			{
				return this.GetTable<EnvironmentalVariable>();
			}
		}
		
		public System.Data.Linq.Table<FetchEngineHistory> FetchEngineHistories
		{
			get
			{
				return this.GetTable<FetchEngineHistory>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddDataSource")]
		public int AddDataSource([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DisplayName", DbType="NVarChar(64)")] string displayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Copyright", DbType="NVarChar(MAX)")] string copyright, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TypeName", DbType="NVarChar(MAX)")] string typeName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uri", DbType="NVarChar(MAX)")] string uri, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RemoteID", DbType="Int")] System.Nullable<int> remoteID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RemoteName", DbType="NVarChar(64)")] string remoteName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), displayName, description, copyright, typeName, uri, remoteID, remoteName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TruncateTables")]
		public int TruncateTables()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddVariable")]
		public int AddVariable([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DisplayName", DbType="NVarChar(64)")] string displayName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(64)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Units", DbType="NVarChar(64)")] string units)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), displayName, description, units);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDataSources")]
		public ISingleResult<GetDataSourcesResult> GetDataSources([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp);
			return ((ISingleResult<GetDataSourcesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDataSourcesForVariable")]
		public ISingleResult<GetDataSourcesForVariableResult> GetDataSourcesForVariable([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EnvVarName", DbType="NVarChar(64)")] string envVarName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp, envVarName);
			return ((ISingleResult<GetDataSourcesForVariableResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetEnvVariables")]
		public ISingleResult<GetEnvVariablesResult> GetEnvVariables()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetEnvVariablesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetExactTimeStamp")]
		public ISingleResult<GetExactTimeStampResult> GetExactTimeStamp([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp);
			return ((ISingleResult<GetExactTimeStampResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFetchEngine")]
		public ISingleResult<GetFetchEngineResult> GetFetchEngine([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp);
			return ((ISingleResult<GetFetchEngineResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFirstTimeStamp")]
		public ISingleResult<GetFirstTimeStampResult> GetFirstTimeStamp()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetFirstTimeStampResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLatestTimeStamp")]
		public ISingleResult<GetLatestTimeStampResult> GetLatestTimeStamp()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetLatestTimeStampResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMapping")]
		public ISingleResult<GetMappingResult> GetMapping([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DataSourceName", DbType="VarChar(45)")] string dataSourceName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp, dataSourceName);
			return ((ISingleResult<GetMappingResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetTimeStamps")]
		public ISingleResult<GetTimeStampsResult> GetTimeStamps()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetTimeStampsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetVariablesForDataSource")]
		public ISingleResult<GetVariablesForDataSourceResult> GetVariablesForDataSource([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DataSourceName", DbType="NVarChar(64)")] string dataSourceName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp, dataSourceName);
			return ((ISingleResult<GetVariablesForDataSourceResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetDataSourceCopyright")]
		public int SetDataSourceCopyright([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Copyright", DbType="NVarChar(MAX)")] string copyright)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, copyright);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetDataSourceDescription")]
		public int SetDataSourceDescription([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetDataSourceProcessor")]
		public int SetDataSourceProcessor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TypeName", DbType="NVarChar(MAX)")] string typeName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RemoteID", DbType="Int")] System.Nullable<int> remoteID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RemoteName", DbType="NVarChar(64)")] string remoteName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, typeName, remoteID, remoteName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetDataSourceUri")]
		public int SetDataSourceUri([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uri", DbType="NVarChar(MAX)")] string uri)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, uri);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetEnvVariableDescription")]
		public int SetEnvVariableDescription([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetEnvVariableUnits")]
		public int SetEnvVariableUnits([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(64)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Units", DbType="NVarChar(64)")] string units)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, units);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetFetchEngine")]
		public int SetFetchEngine([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TypeName", DbType="NVarChar(MAX)")] string typeName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), typeName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetMapping")]
		public int SetMapping([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DataSourceName", DbType="NVarChar(64)")] string dataSourceName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EnvironmaentalVariable", DbType="NVarChar(MAX)")] string environmaentalVariable, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewDataSourceName", DbType="NVarChar(64)")] string newDataSourceName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewIsProvided", DbType="Bit")] System.Nullable<bool> newIsProvided, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewIsEnabled", DbType="Bit")] System.Nullable<bool> newIsEnabled)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataSourceName, environmaentalVariable, newDataSourceName, newIsProvided, newIsEnabled);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRelevantDataSources", IsComposable=true)]
		public IQueryable<GetRelevantDataSourcesResult> GetRelevantDataSources([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> timeStamp)
		{
			return this.CreateMethodCallQuery<GetRelevantDataSourcesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRelevantMappings", IsComposable=true)]
		public IQueryable<GetRelevantMappingsResult> GetRelevantMappings([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> timeStamp)
		{
			return this.CreateMethodCallQuery<GetRelevantMappingsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), timeStamp);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataSources")]
	public partial class DataSource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<VariableMappingHistory> _VariableMappingHistories;
		
		private EntitySet<DataSourcesHistory> _DataSourcesHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DataSource()
		{
			this._VariableMappingHistories = new EntitySet<VariableMappingHistory>(new Action<VariableMappingHistory>(this.attach_VariableMappingHistories), new Action<VariableMappingHistory>(this.detach_VariableMappingHistories));
			this._DataSourcesHistories = new EntitySet<DataSourcesHistory>(new Action<DataSourcesHistory>(this.attach_DataSourcesHistories), new Action<DataSourcesHistory>(this.detach_DataSourcesHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataSource_VariableMappingHistory", Storage="_VariableMappingHistories", ThisKey="ID", OtherKey="DataSourceID")]
		public EntitySet<VariableMappingHistory> VariableMappingHistories
		{
			get
			{
				return this._VariableMappingHistories;
			}
			set
			{
				this._VariableMappingHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataSource_DataSourcesHistory", Storage="_DataSourcesHistories", ThisKey="ID", OtherKey="ID")]
		public EntitySet<DataSourcesHistory> DataSourcesHistories
		{
			get
			{
				return this._DataSourcesHistories;
			}
			set
			{
				this._DataSourcesHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariableMappingHistories(VariableMappingHistory entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = this;
		}
		
		private void detach_VariableMappingHistories(VariableMappingHistory entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = null;
		}
		
		private void attach_DataSourcesHistories(DataSourcesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = this;
		}
		
		private void detach_DataSourcesHistories(DataSourcesHistory entity)
		{
			this.SendPropertyChanging();
			entity.DataSource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VariableMappingHistory")]
	public partial class VariableMappingHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _TimeStamp;
		
		private int _DataSourceID;
		
		private string _DataSourceVariable;
		
		private string _EnvironmentalVariable;
		
		private bool _IsProvided;
		
		private bool _IsEnabled;
		
		private EntityRef<DataSource> _DataSource;
		
		private EntityRef<EnvironmentalVariable> _EnvironmentalVariable1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnDataSourceIDChanging(int value);
    partial void OnDataSourceIDChanged();
    partial void OnDataSourceVariableChanging(string value);
    partial void OnDataSourceVariableChanged();
    partial void OnEnvironmentalVariableChanging(string value);
    partial void OnEnvironmentalVariableChanged();
    partial void OnIsProvidedChanging(bool value);
    partial void OnIsProvidedChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    #endregion
		
		public VariableMappingHistory()
		{
			this._DataSource = default(EntityRef<DataSource>);
			this._EnvironmentalVariable1 = default(EntityRef<EnvironmentalVariable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceID", DbType="Int NOT NULL")]
		public int DataSourceID
		{
			get
			{
				return this._DataSourceID;
			}
			set
			{
				if ((this._DataSourceID != value))
				{
					if (this._DataSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataSourceIDChanging(value);
					this.SendPropertyChanging();
					this._DataSourceID = value;
					this.SendPropertyChanged("DataSourceID");
					this.OnDataSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceVariable", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string DataSourceVariable
		{
			get
			{
				return this._DataSourceVariable;
			}
			set
			{
				if ((this._DataSourceVariable != value))
				{
					this.OnDataSourceVariableChanging(value);
					this.SendPropertyChanging();
					this._DataSourceVariable = value;
					this.SendPropertyChanged("DataSourceVariable");
					this.OnDataSourceVariableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnvironmentalVariable", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string EnvironmentalVariable
		{
			get
			{
				return this._EnvironmentalVariable;
			}
			set
			{
				if ((this._EnvironmentalVariable != value))
				{
					if (this._EnvironmentalVariable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnvironmentalVariableChanging(value);
					this.SendPropertyChanging();
					this._EnvironmentalVariable = value;
					this.SendPropertyChanged("EnvironmentalVariable");
					this.OnEnvironmentalVariableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProvided", DbType="Bit NOT NULL")]
		public bool IsProvided
		{
			get
			{
				return this._IsProvided;
			}
			set
			{
				if ((this._IsProvided != value))
				{
					this.OnIsProvidedChanging(value);
					this.SendPropertyChanging();
					this._IsProvided = value;
					this.SendPropertyChanged("IsProvided");
					this.OnIsProvidedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataSource_VariableMappingHistory", Storage="_DataSource", ThisKey="DataSourceID", OtherKey="ID", IsForeignKey=true)]
		public DataSource DataSource
		{
			get
			{
				return this._DataSource.Entity;
			}
			set
			{
				DataSource previousValue = this._DataSource.Entity;
				if (((previousValue != value) 
							|| (this._DataSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSource.Entity = null;
						previousValue.VariableMappingHistories.Remove(this);
					}
					this._DataSource.Entity = value;
					if ((value != null))
					{
						value.VariableMappingHistories.Add(this);
						this._DataSourceID = value.ID;
					}
					else
					{
						this._DataSourceID = default(int);
					}
					this.SendPropertyChanged("DataSource");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnvironmentalVariable_VariableMappingHistory", Storage="_EnvironmentalVariable1", ThisKey="EnvironmentalVariable", OtherKey="DisplayName", IsForeignKey=true)]
		public EnvironmentalVariable EnvironmentalVariable1
		{
			get
			{
				return this._EnvironmentalVariable1.Entity;
			}
			set
			{
				EnvironmentalVariable previousValue = this._EnvironmentalVariable1.Entity;
				if (((previousValue != value) 
							|| (this._EnvironmentalVariable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnvironmentalVariable1.Entity = null;
						previousValue.VariableMappingHistories.Remove(this);
					}
					this._EnvironmentalVariable1.Entity = value;
					if ((value != null))
					{
						value.VariableMappingHistories.Add(this);
						this._EnvironmentalVariable = value.DisplayName;
					}
					else
					{
						this._EnvironmentalVariable = default(string);
					}
					this.SendPropertyChanged("EnvironmentalVariable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DataSourcesHistory")]
	public partial class DataSourcesHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _TimeStamp;
		
		private string _Uri;
		
		private string _FullClrTypeName;
		
		private string _Description;
		
		private string _Copyright;
		
		private System.Nullable<int> _RemoteID;
		
		private string _RemoteName;
		
		private EntityRef<DataSource> _DataSource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnUriChanging(string value);
    partial void OnUriChanged();
    partial void OnFullClrTypeNameChanging(string value);
    partial void OnFullClrTypeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCopyrightChanging(string value);
    partial void OnCopyrightChanged();
    partial void OnRemoteIDChanging(System.Nullable<int> value);
    partial void OnRemoteIDChanged();
    partial void OnRemoteNameChanging(string value);
    partial void OnRemoteNameChanged();
    #endregion
		
		public DataSourcesHistory()
		{
			this._DataSource = default(EntityRef<DataSource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DataSource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this.OnUriChanging(value);
					this.SendPropertyChanging();
					this._Uri = value;
					this.SendPropertyChanged("Uri");
					this.OnUriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="NVarChar(MAX)")]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this.OnFullClrTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FullClrTypeName = value;
					this.SendPropertyChanged("FullClrTypeName");
					this.OnFullClrTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copyright", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this.OnCopyrightChanging(value);
					this.SendPropertyChanging();
					this._Copyright = value;
					this.SendPropertyChanged("Copyright");
					this.OnCopyrightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteID", DbType="Int")]
		public System.Nullable<int> RemoteID
		{
			get
			{
				return this._RemoteID;
			}
			set
			{
				if ((this._RemoteID != value))
				{
					this.OnRemoteIDChanging(value);
					this.SendPropertyChanging();
					this._RemoteID = value;
					this.SendPropertyChanged("RemoteID");
					this.OnRemoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteName", DbType="NVarChar(64)")]
		public string RemoteName
		{
			get
			{
				return this._RemoteName;
			}
			set
			{
				if ((this._RemoteName != value))
				{
					this.OnRemoteNameChanging(value);
					this.SendPropertyChanging();
					this._RemoteName = value;
					this.SendPropertyChanged("RemoteName");
					this.OnRemoteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DataSource_DataSourcesHistory", Storage="_DataSource", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DataSource DataSource
		{
			get
			{
				return this._DataSource.Entity;
			}
			set
			{
				DataSource previousValue = this._DataSource.Entity;
				if (((previousValue != value) 
							|| (this._DataSource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataSource.Entity = null;
						previousValue.DataSourcesHistories.Remove(this);
					}
					this._DataSource.Entity = value;
					if ((value != null))
					{
						value.DataSourcesHistories.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("DataSource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnvironmentalVariables")]
	public partial class EnvironmentalVariable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DisplayName;
		
		private string _Units;
		
		private string _Description;
		
		private EntitySet<VariableMappingHistory> _VariableMappingHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public EnvironmentalVariable()
		{
			this._VariableMappingHistories = new EntitySet<VariableMappingHistory>(new Action<VariableMappingHistory>(this.attach_VariableMappingHistories), new Action<VariableMappingHistory>(this.detach_VariableMappingHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(64) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EnvironmentalVariable_VariableMappingHistory", Storage="_VariableMappingHistories", ThisKey="DisplayName", OtherKey="EnvironmentalVariable")]
		public EntitySet<VariableMappingHistory> VariableMappingHistories
		{
			get
			{
				return this._VariableMappingHistories;
			}
			set
			{
				this._VariableMappingHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VariableMappingHistories(VariableMappingHistory entity)
		{
			this.SendPropertyChanging();
			entity.EnvironmentalVariable1 = this;
		}
		
		private void detach_VariableMappingHistories(VariableMappingHistory entity)
		{
			this.SendPropertyChanging();
			entity.EnvironmentalVariable1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FetchEngineHistory")]
	public partial class FetchEngineHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _TimeStamp;
		
		private string _FullClrTypeName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnFullClrTypeNameChanging(string value);
    partial void OnFullClrTypeNameChanged();
    #endregion
		
		public FetchEngineHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this.OnFullClrTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FullClrTypeName = value;
					this.SendPropertyChanged("FullClrTypeName");
					this.OnFullClrTypeNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetDataSourcesResult
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _Copyright;
		
		private string _Description;
		
		private string _FullClrTypeName;
		
		private string _Uri;
		
		private string _RemoteName;
		
		private System.Nullable<int> _RemoteID;
		
		public GetDataSourcesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copyright", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this._Copyright = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="NVarChar(MAX)")]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this._FullClrTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this._Uri = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteName", DbType="NVarChar(64)")]
		public string RemoteName
		{
			get
			{
				return this._RemoteName;
			}
			set
			{
				if ((this._RemoteName != value))
				{
					this._RemoteName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteID", DbType="Int")]
		public System.Nullable<int> RemoteID
		{
			get
			{
				return this._RemoteID;
			}
			set
			{
				if ((this._RemoteID != value))
				{
					this._RemoteID = value;
				}
			}
		}
	}
	
	public partial class GetDataSourcesForVariableResult
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _Copyright;
		
		private string _Description;
		
		private string _FullClrTypeName;
		
		private System.Nullable<int> _RemoteID;
		
		private string _RemoteName;
		
		private string _Uri;
		
		public GetDataSourcesForVariableResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copyright", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this._Copyright = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="NVarChar(MAX)")]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this._FullClrTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteID", DbType="Int")]
		public System.Nullable<int> RemoteID
		{
			get
			{
				return this._RemoteID;
			}
			set
			{
				if ((this._RemoteID != value))
				{
					this._RemoteID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemoteName", DbType="NVarChar(64)")]
		public string RemoteName
		{
			get
			{
				return this._RemoteName;
			}
			set
			{
				if ((this._RemoteName != value))
				{
					this._RemoteName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this._Uri = value;
				}
			}
		}
	}
	
	public partial class GetEnvVariablesResult
	{
		
		private string _DisplayName;
		
		private string _Description;
		
		private string _Units;
		
		public GetEnvVariablesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this._DisplayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this._Units = value;
				}
			}
		}
	}
	
	public partial class GetExactTimeStampResult
	{
		
		private System.DateTime _TimeStamp;
		
		public GetExactTimeStampResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	public partial class GetFetchEngineResult
	{
		
		private string _FullClrTypeName;
		
		public GetFetchEngineResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this._FullClrTypeName = value;
				}
			}
		}
	}
	
	public partial class GetFirstTimeStampResult
	{
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		public GetFirstTimeStampResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	public partial class GetLatestTimeStampResult
	{
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		public GetLatestTimeStampResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	public partial class GetMappingResult
	{
		
		private string _FetchVariableName;
		
		private string _DataVariableName;
		
		private System.Nullable<bool> _IsOutbound;
		
		public GetMappingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FetchVariableName", DbType="NVarChar(64)")]
		public string FetchVariableName
		{
			get
			{
				return this._FetchVariableName;
			}
			set
			{
				if ((this._FetchVariableName != value))
				{
					this._FetchVariableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataVariableName", DbType="NVarChar(64)")]
		public string DataVariableName
		{
			get
			{
				return this._DataVariableName;
			}
			set
			{
				if ((this._DataVariableName != value))
				{
					this._DataVariableName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOutbound", DbType="Bit")]
		public System.Nullable<bool> IsOutbound
		{
			get
			{
				return this._IsOutbound;
			}
			set
			{
				if ((this._IsOutbound != value))
				{
					this._IsOutbound = value;
				}
			}
		}
	}
	
	public partial class GetTimeStampsResult
	{
		
		private System.DateTime _TimeStamp;
		
		public GetTimeStampsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	public partial class GetVariablesForDataSourceResult
	{
		
		private string _DisplayName;
		
		private string _Description;
		
		private string _Units;
		
		public GetVariablesForDataSourceResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this._DisplayName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this._Units = value;
				}
			}
		}
	}
	
	public partial class GetRelevantDataSourcesResult
	{
		
		private System.Nullable<int> _ID;
		
		private string _Name;
		
		private string _Uri;
		
		private string _FullClrTypeName;
		
		private string _Description;
		
		private string _Copyright;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		public GetRelevantDataSourcesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uri", DbType="VarChar(MAX)")]
		public string Uri
		{
			get
			{
				return this._Uri;
			}
			set
			{
				if ((this._Uri != value))
				{
					this._Uri = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullClrTypeName", DbType="VarChar(MAX)")]
		public string FullClrTypeName
		{
			get
			{
				return this._FullClrTypeName;
			}
			set
			{
				if ((this._FullClrTypeName != value))
				{
					this._FullClrTypeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Copyright", DbType="VarChar(MAX)")]
		public string Copyright
		{
			get
			{
				return this._Copyright;
			}
			set
			{
				if ((this._Copyright != value))
				{
					this._Copyright = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
	}
	
	public partial class GetRelevantMappingsResult
	{
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private System.Nullable<int> _DataSourceID;
		
		private string _DataSourceName;
		
		private string _DataSourceVariable;
		
		private string _EnvironmentalVariable;
		
		private System.Nullable<bool> _IsProvided;
		
		private System.Nullable<bool> _IsEnabled;
		
		public GetRelevantMappingsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this._TimeStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceID", DbType="Int")]
		public System.Nullable<int> DataSourceID
		{
			get
			{
				return this._DataSourceID;
			}
			set
			{
				if ((this._DataSourceID != value))
				{
					this._DataSourceID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceName", DbType="NVarChar(64)")]
		public string DataSourceName
		{
			get
			{
				return this._DataSourceName;
			}
			set
			{
				if ((this._DataSourceName != value))
				{
					this._DataSourceName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataSourceVariable", DbType="NVarChar(64)")]
		public string DataSourceVariable
		{
			get
			{
				return this._DataSourceVariable;
			}
			set
			{
				if ((this._DataSourceVariable != value))
				{
					this._DataSourceVariable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnvironmentalVariable", DbType="NVarChar(64)")]
		public string EnvironmentalVariable
		{
			get
			{
				return this._EnvironmentalVariable;
			}
			set
			{
				if ((this._EnvironmentalVariable != value))
				{
					this._EnvironmentalVariable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProvided", DbType="Bit")]
		public System.Nullable<bool> IsProvided
		{
			get
			{
				return this._IsProvided;
			}
			set
			{
				if ((this._IsProvided != value))
				{
					this._IsProvided = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit")]
		public System.Nullable<bool> IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this._IsEnabled = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
