/*
Deployment script for FetchConfigurationDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Creating [dbo].[DataSources]...';


GO
CREATE TABLE [dbo].[DataSources] (
    [ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[EnvironmentalVariables]...';


GO
CREATE TABLE [dbo].[EnvironmentalVariables] (
    [DisplayName] NVARCHAR (64)  NOT NULL,
    [Units]       NVARCHAR (64)  NOT NULL,
    [Description] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([DisplayName] ASC)
);


GO
PRINT N'Creating [dbo].[FetchEngineHistory]...';


GO
CREATE TABLE [dbo].[FetchEngineHistory] (
    [TimeStamp]       DATETIME       NOT NULL,
    [FullClrTypeName] NVARCHAR (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([TimeStamp] ASC)
);


GO
PRINT N'Creating [dbo].[DataSourcesHistory]...';


GO
CREATE TABLE [dbo].[DataSourcesHistory] (
    [ID]              INT            NOT NULL,
    [TimeStamp]       DATETIME       NOT NULL,
    [Uri]             NVARCHAR (MAX) NOT NULL,
    [FullClrTypeName] NVARCHAR (MAX) NULL,
    [Description]     NVARCHAR (MAX) NOT NULL,
    [Copyright]       NVARCHAR (MAX) NOT NULL,
    [RemoteID]        INT            NULL,
    [RemoteName]      NVARCHAR (64)  NULL,
    PRIMARY KEY CLUSTERED ([TimeStamp] ASC, [ID] ASC)
);


GO
PRINT N'Creating [dbo].[VariableMappingHistory]...';


GO
CREATE TABLE [dbo].[VariableMappingHistory] (
    [TimeStamp]             DATETIME      NOT NULL,
    [DataSourceID]          INT           NOT NULL,
    [DataSourceVariable]    NVARCHAR (64) NOT NULL,
    [EnvironmentalVariable] NVARCHAR (64) NOT NULL,
    [IsProvided]            BIT           NOT NULL,
    [IsEnabled]             BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([TimeStamp] ASC)
);


GO
PRINT N'Creating Default Constraint on [dbo].[FetchEngineHistory]....';


GO
ALTER TABLE [dbo].[FetchEngineHistory]
    ADD DEFAULT (getutcdate()) FOR [TimeStamp];


GO
PRINT N'Creating Default Constraint on [dbo].[DataSourcesHistory]....';


GO
ALTER TABLE [dbo].[DataSourcesHistory]
    ADD DEFAULT (getutcdate()) FOR [TimeStamp];


GO
PRINT N'Creating Default Constraint on [dbo].[DataSourcesHistory]....';


GO
ALTER TABLE [dbo].[DataSourcesHistory]
    ADD DEFAULT ('') FOR [Uri];


GO
PRINT N'Creating Default Constraint on [dbo].[VariableMappingHistory]....';


GO
ALTER TABLE [dbo].[VariableMappingHistory]
    ADD DEFAULT (getutcdate()) FOR [TimeStamp];


GO
PRINT N'Creating Default Constraint on [dbo].[VariableMappingHistory]....';


GO
ALTER TABLE [dbo].[VariableMappingHistory]
    ADD DEFAULT ((1)) FOR [IsEnabled];


GO
PRINT N'Creating FK_DataSources_ToDataSourceIDs...';


GO
ALTER TABLE [dbo].[DataSourcesHistory]
    ADD CONSTRAINT [FK_DataSources_ToDataSourceIDs] FOREIGN KEY ([ID]) REFERENCES [dbo].[DataSources] ([ID]);


GO
PRINT N'Creating FK_VariableMappings_ToDataSourceIDs...';


GO
ALTER TABLE [dbo].[VariableMappingHistory]
    ADD CONSTRAINT [FK_VariableMappings_ToDataSourceIDs] FOREIGN KEY ([DataSourceID]) REFERENCES [dbo].[DataSources] ([ID]);


GO
PRINT N'Creating FK_VariableMappings_ToEnvironmentalVariables...';


GO
ALTER TABLE [dbo].[VariableMappingHistory]
    ADD CONSTRAINT [FK_VariableMappings_ToEnvironmentalVariables] FOREIGN KEY ([EnvironmentalVariable]) REFERENCES [dbo].[EnvironmentalVariables] ([DisplayName]);


GO
PRINT N'Creating [dbo].[Trigger_FederatedOrLocalControl]...';


GO

CREATE TRIGGER [dbo].[Trigger_FederatedOrLocalControl]
    ON [dbo].[DataSourcesHistory]
    INSTEAD OF INSERT
    AS
    BEGIN
        SET NoCount ON
		DECLARE @HandlerType NVARCHAR(MAX)
		DECLARE @RemoteId int
		DECLARE @RemoteName NVARCHAR(64)
		SELECT @HandlerType=FullClrTypeName from inserted
		SELECT @RemoteId=RemoteID from inserted
		SELECT @RemoteName=RemoteName from inserted
		IF (((@HandlerType IS NULL) AND (@RemoteId IS NOT NULL) AND (@RemoteName IS NOT NULL)) OR ((@HandlerType IS NOT NULL) AND (@RemoteId IS NULL) AND (@RemoteName IS NULL)))
		BEGIN
			INSERT INTO DataSourcesHistory SELECT ID,TimeStamp,Uri,FullClrTypeName,Description,Copyright,RemoteID,RemoteName FROM inserted
		END
    END
GO
PRINT N'Creating [dbo].[GetRelevantMappings]...';


GO
CREATE FUNCTION [dbo].[GetRelevantMappings]
(
	@timeStamp DateTime
)
RETURNS @returntable TABLE
(
	TimeStamp             DATETIME,     
    DataSourceID          INT,          
	DataSourceName		  NVARCHAR(64),
    DataSourceVariable    NVARCHAR(64), 
    EnvironmentalVariable NVARCHAR(64), 
    IsProvided            BIT,          
    IsEnabled             BIT          
)
AS
BEGIN
	INSERT @returntable
	SELECT vm.TimeStamp,vm.DataSourceID,ds.Name, vm.DataSourceVariable, vm.EnvironmentalVariable, vm.IsProvided, vm.IsEnabled FROM [dbo].VariableMappingHistory vm
	INNER JOIN (
		SELECT vm2.DataSourceID id,vm2.EnvironmentalVariable, max(vm2.TimeStamp) ts
		FROM [dbo].VariableMappingHistory vm2
		WHERE vm2.TimeStamp <= @timeStamp
		GROUP BY vm2.DataSourceID, vm2.EnvironmentalVariable) recentMappings ON recentMappings.ts = vm.TimeStamp AND recentMappings.id=vm.DataSourceID AND recentMappings.EnvironmentalVariable=vm.EnvironmentalVariable
	INNER JOIN [dbo].DataSources ds ON ds.ID = vm.DataSourceID
	RETURN
END
GO
PRINT N'Creating [dbo].[GetRelevantDataSources]...';


GO
CREATE FUNCTION [dbo].[GetRelevantDataSources]
(
	@timeStamp DateTime
)
RETURNS @returntable TABLE
(
	ID int,
	Name varchar(64),
	Uri varchar(MAX),
	FullClrTypeName varchar(MAX),
	Description varchar(MAX),	
	Copyright varchar(MAX),
	TimeStamp DateTime
)
AS
BEGIN
	INSERT @returntable
	SELECT ds.ID,ds.Name,dsh.Uri, dsh.FullClrTypeName,dsh.Description, dsh.Copyright,dsh.TimeStamp FROM [dbo].DataSourcesHistory dsh
			INNER JOIN
			(SELECT ds2.ID,max(ds2.TimeStamp) ts
			FROM [dbo].DataSourcesHistory ds2
			WHERE ds2.TimeStamp <= @timeStamp
			GROUP BY ds2.ID) recentDataSources ON dsh.ID=recentDataSources.ID ANd dsh.TimeStamp=recentDataSources.ts
			INNER JOIN
			[dbo].DataSources ds ON ds.ID=dsh.ID
	RETURN
END
GO
PRINT N'Creating [dbo].[SetMapping]...';


GO
--====================================================================================================================
--SetMapping - Updates mapping specified by @DataSourceID and @EnvironmaentalVariable. Adds new database record to VariableMappings table with current TimeStamp(UTC).
--						   If @NewDataSourceName, @NewIsProvided, @NewIsEnabled are not changed then do nothing.
--	@TypeName NVARCHAR (MAX)
--	@DataSourceID INT
--  @EnvironmaentalVariable NVARCHAR (MAX)
--	@NewDataSourceName NVARCHAR (64)
--	@NewIsProvided BIT
--	@NewIsEnabled BIT=1
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetMapping]
	@DataSourceName NVARCHAR (64), 
	@EnvironmaentalVariable NVARCHAR (MAX), 
	@NewDataSourceName NVARCHAR (64), 
	@NewIsProvided BIT,
	@NewIsEnabled BIT=1
AS

DECLARE @DataSourceID INT
DECLARE @DBDataSourceID INT
DECLARE @DBEnvironmaentalVariable NVARCHAR(MAX)
DECLARE @DBDataSourceName NVARCHAR (64)
DECLARE @DBIsProvided BIT
DECLARE @DBIsEnabled BIT
DECLARE @TryCount INT

SET @DataSourceID = (SELECT ds.ID FROM [dbo].DataSources ds WHERE ds.Name = @DataSourceName)

DECLARE Cur CURSOR FOR
	SELECT TOP 1 vm.DataSourceID, vm.DataSourceVariable, vm.EnvironmentalVariable, vm.IsProvided, vm.IsEnabled  
	FROM [dbo].VariableMappingHistory AS vm
	WHERE vm.DataSourceID = @DataSourceID AND vm.EnvironmentalVariable = @EnvironmaentalVariable 
		AND vm.TimeStamp = (
					SELECT MAX(TimeStamp) 
					FROM [dbo].VariableMappingHistory AS vm2 
					WHERE vm2.DataSourceID = @DataSourceID AND vm2.EnvironmentalVariable = @EnvironmaentalVariable 
			)

OPEN Cur
FETCH NEXT FROM Cur INTO @DBDataSourceID, @DBDataSourceName, @DBEnvironmaentalVariable,  @DBIsProvided, @DBIsEnabled

CLOSE Cur 
DEALLOCATE Cur

IF((@@FETCH_STATUS < 0) OR @NewDataSourceName <> @DBDataSourceName OR @NewIsProvided <> @DBIsProvided OR @NewIsEnabled <> @DBIsEnabled)
BEGIN
	SET @TryCount = 0
	WHILE @TryCount<5
	BEGIN
		BEGIN TRY		
		INSERT INTO [dbo].VariableMappingHistory (DataSourceID,EnvironmentalVariable, DataSourceVariable, IsProvided,IsEnabled) 
		VALUES(@DataSourceID, @EnvironmaentalVariable, @NewDataSourceName, @NewIsProvided, @NewIsEnabled)
		BREAK
		END TRY
		BEGIN CATCH
			WAITFOR DELAY '00:00:01'
			SET @TryCount = @TryCount+1
		END CATCH
	END
END
GO
PRINT N'Creating [dbo].[GetEnvVariables]...';


GO
--====================================================================================================================
--GetEnvVariables - Retrieves all available variables --for specified @TimeStamp(UTC) and @EnvVarName from EnvironmentalVariables table.
--	@TimeStamp DATETIME
--  @EnvVarName NVARCHAR(64)
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetEnvVariables]
--	@TimeStamp datetime
AS

SELECT DISTINCT vars.DisplayName, vars.Description, vars.Units FROM [dbo].EnvironmentalVariables vars
-- [dbo].[GetRelevantMappings](@TimeStamp) vm
--INNER JOIN [dbo].EnvironmentalVariables vars ON vars.DisplayName=vm.EnvironmentalVariable
--WHERE vm.DataSourceID IN 
--			(SELECT ds.ID FROM [dbo].[GetRelevantDataSources](@TimeStamp) ds)
GO
PRINT N'Creating [dbo].[SetFetchEngine]...';


GO
--====================================================================================================================
--SetFetchEngine - Updates FetchEngine TypeName specified by @TypeName Adds new database record to FetchEngine table with current TimeStamp(UTC).
--						   If @TypeName is not changed then do nothing.
--	@TypeName NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetFetchEngine]
	@TypeName NVARCHAR (MAX)
AS

	DECLARE @DBFullClrTypeName NVARCHAR(MAX)

	SET @DBFullClrTypeName = 
	(SELECT fe.FullClrTypeName
		FROM [dbo].FetchEngineHistory AS fe
		WHERE 
			fe.FullClrTypeName = @TypeName AND 
			fe.TimeStamp =(SELECT MAX(fe2.TimeStamp) FROM [dbo].FetchEngineHistory AS fe2 WHERE fe2.FullClrTypeName = @TypeName))

	IF(@DBFullClrTypeName <> @TypeName OR @DBFullClrTypeName IS NULL)
	BEGIN
		INSERT INTO [dbo].FetchEngineHistory (FullClrTypeName) VALUES(@TypeName)
	END
GO
PRINT N'Creating [dbo].[SetDataSourceUri]...';


GO
--====================================================================================================================
--SetDataSourceUri - Updates DataSource Uri specified by @Name Adds new database record to DataSources table with current TimeStamp(UTC).
--						   If @Uri is not changed then do nothing.
--	@Name NVARCHAR(64),
--	@Uri NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetDataSourceUri]
	@Name NVARCHAR (64),
	@Uri NVARCHAR (MAX)
AS
	DECLARE @DBID INT
	DECLARE @DBFullClrTypeName NVARCHAR (MAX)	
	DECLARE @DBDescription NVARCHAR (MAX)
	DECLARE @DBCopyright NVARCHAR (MAX)
	DECLARE @DBUri NVARCHAR (MAX)

	DECLARE Cur CURSOR FOR
			SELECT ds.ID, ds.Uri, ds.FullClrTypeName, ds.Description, ds.Copyright
			FROM [dbo].DataSourcesHistory AS ds 
				INNER JOIN [dbo].DataSources as dsi
				ON ds.ID = dsi.ID
			WHERE 
				dsi.Name = @Name AND 
				ds.TimeStamp =(SELECT MAX(ds2.TimeStamp) FROM [dbo].DataSourcesHistory AS ds2 WHERE ds2.ID = ds.ID)

	OPEN Cur
	FETCH NEXT FROM Cur INTO @DBID, @DBUri, @DBFullClrTypeName, @DBDescription, @DBCopyright
	CLOSE Cur 
	DEALLOCATE Cur

	-- NULL is not equal some string (FALSE)
	IF(@DBUri <> @Uri OR (@DBUri IS NULL AND @Uri IS NOT NULL) OR (@DBUri IS NOT NULL AND @Uri IS NULL))
	BEGIN
		INSERT INTO [dbo].DataSourcesHistory(ID, Uri, FullClrTypeName, Description, Copyright)
		VALUES (@DBID, @Uri, @DBFullClrTypeName, @DBDescription, @DBCopyright)
	END
GO
PRINT N'Creating [dbo].[SetDataSourceProcessor]...';


GO
--====================================================================================================================
--SetDataSourceProcessor - Updates DataSource TypeName specified by @Name Adds new database record to DataSources table with current TimeStamp(UTC).
--						   If @TypeName is not changed then do nothing.
--	@Name NVARCHAR(64),
--	@TypeName NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetDataSourceProcessor]
	@Name NVARCHAR (64),
	@TypeName NVARCHAR (MAX) = NULL,
	@RemoteID INT = NULL,
	@RemoteName NVARCHAR (64) = NULL
AS
	DECLARE @DBTypeName NVARCHAR (MAX)
	DECLARE @DBID INT
	DECLARE @DBFullClrTypeName NVARCHAR (MAX)	
	DECLARE @DBDescription NVARCHAR (MAX)
	DECLARE @DBCopyright NVARCHAR (MAX)
	DECLARE @DBUri NVARCHAR (MAX)
	DECLARE @DBRemoteID INT
	DECLARE @DBRemoteName NVARCHAR (64)

	IF ((@TypeName IS NULL AND (@RemoteID IS NOT NULL AND @RemoteName IS NOT NULL)) 
		OR (@TypeName IS NOT NULL AND (@RemoteID IS NULL AND @RemoteName IS NULL)))
	BEGIN
		DECLARE Cur CURSOR FOR
			SELECT ds.ID, ds.Uri, ds.FullClrTypeName, ds.Description, ds.Copyright, ds.RemoteID, ds.RemoteName
			FROM [dbo].DataSourcesHistory AS ds 
				INNER JOIN [dbo].DataSources as dsi
				ON ds.ID = dsi.ID
			WHERE 
				dsi.Name = @Name AND 
				ds.TimeStamp =(SELECT MAX(ds2.TimeStamp) FROM [dbo].DataSourcesHistory AS ds2 WHERE ds2.ID = dsi.ID)

		OPEN Cur
		FETCH NEXT FROM Cur INTO @DBID, @DBUri, @DBFullClrTypeName, @DBDescription, @DBCopyright, @DBRemoteID, @DBRemoteName
		--SELECT @DBID, @DBUri, @DBFullClrTypeName, @DBIsHidden, @DBDescription, @DBCopyright
		CLOSE Cur 
		DEALLOCATE Cur
		
		IF (@DBID IS NOT NULL AND ((@TypeName IS NOT NULL AND (@TypeName <> @DBFullClrTypeName OR @DBFullClrTypeName IS NULL)) OR
			(@RemoteName IS NOT NULL AND (@RemoteID <> @DBRemoteID OR @RemoteName <> @DBRemoteName OR @DBRemoteID IS NULL OR @DBRemoteName IS NULL)))) 
		BEGIN
			INSERT INTO [dbo].DataSourcesHistory(ID, Uri, FullClrTypeName, Description, Copyright, RemoteID, RemoteName)
			VALUES (@DBID, @DBUri, @TypeName, @DBDescription, @DBCopyright, @RemoteID, @RemoteName)
		END
	END
	ELSE
	BEGIN
		RAISERROR('Failed to SET DataSource: handler and remoteName parameters cannot be set at the same time.', 16, 1)
	END
GO
PRINT N'Creating [dbo].[AddDataSource]...';


GO
--====================================================================================================================
--AddDataSource - Adds new DataSource with given parameters to DataSources table. If DataSource with @DisplayName is not exists then adds new DataSource to DataSourceIDs table.
--		  		  This procedure uses transaction. In case something is going wrong it throws exception.
--	@DisplayName NVARCHAR (64),
--	@Description NVARCHAR (MAX),
--	@Copyright NVARCHAR (MAX),
--	@TypeName NVARCHAR (MAX),
--	@Uri NVARCHAR (MAX) = NULL,
--====================================================================================================================

CREATE PROCEDURE [dbo].[AddDataSource]
	@DisplayName NVARCHAR (64),
	@Description NVARCHAR (MAX),
	@Copyright NVARCHAR (MAX),
	@TypeName NVARCHAR (MAX) = NULL,
	@Uri NVARCHAR (MAX) = NULL,
	@RemoteID INT = NULL,
	@RemoteName NVARCHAR (64) = NULL
AS
	BEGIN TRANSACTION
		IF ((@TypeName IS NULL AND (@RemoteID IS NOT NULL AND @RemoteName IS NOT NULL)) 
		OR (@TypeName IS NOT NULL AND (@RemoteID IS NULL AND @RemoteName IS NULL)))
		BEGIN
			DECLARE @SourceId INT
			SET @SourceId = (SELECT ds.ID FROM [dbo].DataSources AS ds WHERE ds.Name = @DisplayName )
			IF(@SourceId IS NULL)
			BEGIN
				INSERT INTO [dbo].DataSources (Name) VALUES(@DisplayName)
				SET @SourceId = @@IDENTITY
			END
			-- Rollback the transaction if there were any errors
			IF @@ERROR <> 0
			BEGIN
				-- Rollback the transaction
				ROLLBACK

				-- Raise an error and return
				RAISERROR ('Error in inserting name in DataSourceIDs.', 16, 1)
				RETURN 0
			END

			DECLARE @DBDisplayName NVARCHAR (64)
			DECLARE @DBDescription NVARCHAR (MAX)
			DECLARE @DBCopyright NVARCHAR (MAX)
			DECLARE @DBTypeName NVARCHAR (MAX)
			DECLARE @DBUri NVARCHAR (MAX)		
			DECLARE @DBRemoteID INT
			DECLARE @DBRemoteName NVARCHAR (64)	

			DECLARE Cur CURSOR FOR
				SELECT ds.ID, ds.Description, ds.Copyright, ds.FullClrTypeName, ds.Uri, ds.RemoteID, ds.RemoteName
				FROM [dbo].DataSourcesHistory AS ds 
				WHERE ds.TimeStamp = (SELECT MAX(ds2.TimeStamp) FROM [dbo].DataSourcesHistory as ds2 WHERE ds2.ID = @SourceId)
		
			OPEN Cur
			FETCH NEXT FROM Cur INTO @SourceId, @DBDescription, @DBCopyright, @DBTypeName, @DBUri, @DBRemoteID, @DBRemoteName
			CLOSE Cur
			DEALLOCATE Cur

			IF(@@FETCH_STATUS < 0)
			BEGIN
				INSERT INTO [dbo].DataSourcesHistory(ID, Description, Copyright, FullClrTypeName, Uri, RemoteID, RemoteName) 
				VALUES (@SourceId, @Description, @Copyright, @TypeName, @Uri, @RemoteID, @RemoteName)
			
			END
			ELSE
			BEGIN
				-- Rollback the transaction
				ROLLBACK
				RAISERROR('Failed to add DataSource as it is already exist', 16, 1)
				RETURN 0
			END

		END
		ELSE
		BEGIN
			-- Rollback the transaction
			ROLLBACK
			RAISERROR('Failed to add DataSource: handler and remoteName parameters cannot be set at the same time.', 16, 1)
			RETURN 0
		END
	COMMIT TRANSACTION
	--RETURN @SourceId
GO
PRINT N'Creating [dbo].[AddVariable]...';


GO
--====================================================================================================================
--AddVariable - Adds new variable to EnvironmentalVariables table.
--	@DisplayName NVARCHAR (64)
--	@Description NVARCHAR (64)
--	@Units NVARCHAR (64)
--====================================================================================================================

CREATE PROCEDURE [dbo].[AddVariable]
	@DisplayName NVARCHAR (64),
	@Description NVARCHAR (64),
	@Units NVARCHAR (64)
AS
	INSERT INTO [dbo].EnvironmentalVariables VALUES(@DisplayName, @Units, @Description)
GO
PRINT N'Creating [dbo].[TruncateTables]...';


GO
--====================================================================================================================
--TruncateTables - Truncate all tables. For debug purpose only.
--====================================================================================================================

CREATE PROCEDURE [dbo].[TruncateTables]
AS

	DELETE FROM [dbo].VariableMappingHistory
	DELETE FROM [dbo].FetchEngineHistory
	DELETE FROM [dbo].EnvironmentalVariables
	DELETE FROM [dbo].DataSourcesHistory
	DELETE FROM [dbo].DataSources
GO
PRINT N'Creating [dbo].[GetFetchEngine]...';


GO
--====================================================================================================================
--GetFetchEngine - Retrieves FetchEngine for specified @TimeStamp(UTC) from FetchEngine table. Where FetchEngine Timestamp <= @TimeStamp (UTC).
--	@TimeStamp DATETIME
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetFetchEngine]
	@TimeStamp datetime
AS
	SELECT TOP 1 f.FullClrTypeName FROM [dbo].FetchEngineHistory AS f WHERE f.TimeStamp <= @TimeStamp ORDER BY f.TimeStamp DESC
GO
PRINT N'Creating [dbo].[GetDataSourcesForVariable]...';


GO
--====================================================================================================================
--GetDataSourcesForVariable - Retrieves all available (mapping exists, variable is provided) DataSources for specified datetime and variable from DataSources table, where DataSource datetime <= @TimeStamp (UTC).
--	@TimeStamp DATETIME
--  @EnvVarName NVARCHAR(64)
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetDataSourcesForVariable]
	@TimeStamp DATETIME,
	@EnvVarName NVARCHAR(64)
AS

	SELECT ds.ID, dsi.Name, ds.Copyright, ds.Description, ds.FullClrTypeName,ds.RemoteID,ds.RemoteName,ds.Uri
	FROM [dbo].DataSourcesHistory AS ds
	INNER JOIN
		(
			SELECT ds2.ID, MAX(ds2.TimeStamp) AS TimeStamp
			FROM [dbo].DataSourcesHistory AS ds2 
			WHERE ds2.TimeStamp <= @TimeStamp
			GROUP BY ds2.ID
		) 
	recent ON recent.ID=ds.ID AND recent.TimeStamp=ds.TimeStamp
	INNER JOIN 
		[dbo].DataSources AS dsi ON dsi.ID=ds.ID
	INNER JOIN 
		(
			SELECT *
			FROM [dbo].[GetRelevantMappings](@TimeStamp) AS vmj
			WHERE vmj.IsEnabled = 1 AND vmj.IsProvided = 1 AND vmj.EnvironmentalVariable = @EnvVarName
		)
	vm ON vm.DataSourceID = dsi.ID
--		[dbo].VariableMappingHistory AS vm ON vm.DataSourceID = dsi.ID AND vm.EnvironmentalVariable = @EnvVarName AND vm.IsEnabled = 1 AND vm.IsProvided = 1
GO
PRINT N'Creating [dbo].[GetLatestTimeStamp]...';


GO
--====================================================================================================================
--GetLatestTimeStamp - Retrieves latest TimeStamp (UTC) over all tables.
--====================================================================================================================
CREATE PROCEDURE [dbo].[GetLatestTimeStamp]
AS
	SELECT MAX(res.TimeStamp) as TimeStamp FROM
		(
				(SELECT Max(ds.TimeStamp) AS TimeStamp FROM [dbo].DataSourcesHistory AS ds)
			UNION
				(SELECT Max(fe.TimeStamp) AS TimeStamp FROM [dbo].FetchEngineHistory AS fe)
			UNION
				(SELECT Max(vm.TimeStamp) AS TimeStamp FROM [dbo].VariableMappingHistory AS vm)
		) res
GO
PRINT N'Creating [dbo].[GetTimeStamps]...';


GO
CREATE PROCEDURE [dbo].[GetTimeStamps]
AS
	RETURN 
	SELECT res.[TimeStamp] FROM
	((SELECT [TimeStamp] FROM DataSourcesHistory)
	UNION
	(SELECT [TimeStamp] FROM FetchEngineHistory)
	UNION
	(SELECT [TimeStamp] FROM VariableMappingHistory)
	) res ORDER BY [TimeStamp] DESC
GO
PRINT N'Creating [dbo].[GetVariablesForDataSource]...';


GO
--====================================================================================================================
--GetVariablesForDataSource - Retrieves all enabled variables for specified @TimeStamp(UTC) and @DataSourceName from EnvironmentalVariables, VariableMappings, DataSources, DataSourceIDs tables. 
--							  Where DataSource Timestamp <= @TimeStamp (UTC).
--	@TimeStamp DATETIME
--  @DataSourceName
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetVariablesForDataSource]
	@TimeStamp DATETIME,
	@DataSourceName NVARCHAR(64)
AS
SELECT vars.DisplayName, vars.Description, vars.Units FROM [dbo].[GetRelevantMappings](@TimeStamp) vm
INNER JOIN [dbo].EnvironmentalVariables vars ON vars.DisplayName=vm.EnvironmentalVariable
WHERE vm.DataSourceName=@DataSourceName AND vm.IsEnabled=1
GO
PRINT N'Creating [dbo].[GetDataSources]...';


GO
--====================================================================================================================
--GetDataSources - Retrieves all registered DataSources (with and without mappings) for specified datetime from DataSources table, where DataSource datetime <= @TimeStamp (UTC).
--	@TimeStamp datetime
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetDataSources]
	@TimeStamp datetime
AS

SELECT ds.ID, dsi.Name, ds.Copyright, ds.Description, ds.FullClrTypeName, ds.Uri, ds.RemoteName, ds.RemoteID
FROM [dbo].DataSourcesHistory AS ds
INNER JOIN
	(
		SELECT ds2.ID, MAX(TimeStamp) AS TimeStamp
		FROM DataSourcesHistory AS ds2 
		WHERE ds2.TimeStamp <= CONVERT(DATETIME, @TimeStamp)
		GROUP BY ID
	) 
recent ON recent.ID=ds.ID AND recent.TimeStamp=ds.TimeStamp
INNER JOIN 
	[dbo].DataSources AS dsi ON dsi.ID=ds.ID
GO
PRINT N'Creating [dbo].[GetMapping]...';


GO
--====================================================================================================================
--GetMapping - Retrieves all available mappings for specified @TimeStamp(UTC) adn @DataSourceName from VariableMappings table. Where Timestamp <= @TimeStamp (UTC).
--	@TimeStamp DATETIME
--  @DataSourceName VARCHAR(45)
--====================================================================================================================

CREATE PROCEDURE [dbo].[GetMapping]
	@TimeStamp DATETIME, 
	@DataSourceName VARCHAR(45)
AS
	SELECT vm.EnvironmentalVariable AS FetchVariableName, vm.DataSourceVariable AS DataVariableName, vm.IsProvided AS IsOutbound
	FROM [dbo].[GetRelevantMappings](@TimeStamp) vm
	WHERE vm.IsEnabled != 0 AND vm.DataSourceName = @DataSourceName
GO
PRINT N'Creating [dbo].[GetExactTimeStamp]...';


GO
--====================================================================================================================
--GetLatestTimeStamp - Retrieves latest TimeStamp (UTC) over all tables.
--====================================================================================================================
CREATE PROCEDURE [dbo].[GetExactTimeStamp]
	@TimeStamp DATETIME
AS
	SELECT TOP 1 res.TimeStamp FROM
		(
				(SELECT ds.TimeStamp AS TimeStamp FROM [dbo].DataSourcesHistory AS ds)
			UNION
				(SELECT fe.TimeStamp AS TimeStamp FROM [dbo].FetchEngineHistory AS fe)
			UNION
				(SELECT vm.TimeStamp AS TimeStamp FROM [dbo].VariableMappingHistory AS vm)
		) res WHERE res.TimeStamp <= @TimeStamp ORDER BY res.TimeStamp DESC
GO
PRINT N'Creating [dbo].[GetFirstTimeStamp]...';


GO
--====================================================================================================================
--GetLatestTimeStamp - Retrieves latest TimeStamp (UTC) over all tables.
--====================================================================================================================
CREATE PROCEDURE [dbo].[GetFirstTimeStamp]
AS
	SELECT MIN(res.TimeStamp) as TimeStamp FROM
		(
				(SELECT Min(ds.TimeStamp) AS TimeStamp FROM [dbo].DataSourcesHistory AS ds)
			UNION
				(SELECT Min(fe.TimeStamp) AS TimeStamp FROM [dbo].FetchEngineHistory AS fe)
			UNION
				(SELECT Min(vm.TimeStamp) AS TimeStamp FROM [dbo].VariableMappingHistory AS vm)
		) res
GO
PRINT N'Creating [dbo].[SetEnvVariableDescription]...';


GO
--====================================================================================================================
--SetEnvVariableUnits - Updates Environmetal Variable Description field specified by @Name.
--	@Name NVARCHAR(64),
--	@Units NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetEnvVariableDescription]
	@Name NVARCHAR (64),
	@Description NVARCHAR (MAX)
AS
	UPDATE [dbo].EnvironmentalVariables SET Description = @Description WHERE DisplayName = @Name
GO
PRINT N'Creating [dbo].[SetEnvVariableUnits]...';


GO
--====================================================================================================================
--SetEnvVariableUnits - Updates Environmetal Variable Units field specified by @Name.
--	@Name NVARCHAR(64),
--	@Units NVARCHAR (64)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetEnvVariableUnits]
	@Name NVARCHAR (64),
	@Units NVARCHAR (64)
AS
	UPDATE [dbo].EnvironmentalVariables SET Units = @Units WHERE DisplayName = @Name
GO
PRINT N'Creating [dbo].[SetDataSourceCopyright]...';


GO
--====================================================================================================================
--SetDataSourceCopyright - Updates DataSource Copyright specified by @Name Adds new database record to DataSources table with current TimeStamp(UTC).
--						   If @Copyright is not changed then do nothing.
--	@Name NVARCHAR(64),
--	@Copyright NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetDataSourceCopyright]
	@Name NVARCHAR (64),
	@Copyright NVARCHAR (MAX)
AS
	DECLARE @DBID INT
	DECLARE @DBFullClrTypeName NVARCHAR (MAX)	
	DECLARE @DBDescription NVARCHAR (MAX)
	DECLARE @DBCopyright NVARCHAR (MAX)
	DECLARE @DBUri NVARCHAR (MAX)

	DECLARE Cur CURSOR FOR
			SELECT ds.ID, ds.Uri, ds.FullClrTypeName, ds.Description, ds.Copyright
			FROM [dbo].DataSourcesHistory AS ds 
				INNER JOIN [dbo].DataSources as dsi
				ON ds.ID = dsi.ID
			WHERE 
				dsi.Name = @Name AND 
				ds.TimeStamp =(SELECT MAX(ds2.TimeStamp) FROM [dbo].DataSourcesHistory AS ds2 WHERE ds2.ID = ds.ID)

	OPEN Cur
	FETCH NEXT FROM Cur INTO @DBID, @DBUri, @DBFullClrTypeName, @DBDescription, @DBCopyright
	CLOSE Cur 
	DEALLOCATE Cur

	-- NULL is not equal some string (FALSE)
	IF(@DBCopyright <> @Copyright OR (@DBCopyright IS NULL AND @Copyright IS NOT NULL) OR (@DBCopyright IS NOT NULL AND @Copyright IS NULL))
	BEGIN
		INSERT INTO [dbo].DataSourcesHistory(ID, Uri, FullClrTypeName, Description, Copyright)
		VALUES (@DBID, @DBUri, @DBFullClrTypeName, @DBDescription, @Copyright)
	END
GO
PRINT N'Creating [dbo].[SetDataSourceDescription]...';


GO
--====================================================================================================================
--SetDataSourceDescription - Updates DataSource Description specified by @Name Adds new database record to DataSources table with current TimeStamp(UTC).
--						   If @Description is not changed then do nothing.
--	@Name NVARCHAR(64),
--	@Description NVARCHAR (MAX)
--====================================================================================================================

CREATE PROCEDURE [dbo].[SetDataSourceDescription]
	@Name NVARCHAR (64),
	@Description NVARCHAR (MAX)
AS
	DECLARE @DBID INT
	DECLARE @DBFullClrTypeName NVARCHAR (MAX)	
	DECLARE @DBDescription NVARCHAR (MAX)
	DECLARE @DBCopyright NVARCHAR (MAX)
	DECLARE @DBUri NVARCHAR (MAX)

	DECLARE Cur CURSOR FOR
			SELECT ds.ID, ds.Uri, ds.FullClrTypeName, ds.Description, ds.Copyright
			FROM [dbo].DataSourcesHistory AS ds 
				INNER JOIN [dbo].DataSources as dsi
				ON ds.ID = dsi.ID
			WHERE 
				dsi.Name = @Name AND 
				ds.TimeStamp =(SELECT MAX(ds2.TimeStamp) FROM [dbo].DataSourcesHistory AS ds2 WHERE ds2.ID = ds.ID)

	OPEN Cur
	FETCH NEXT FROM Cur INTO @DBID, @DBUri, @DBFullClrTypeName, @DBDescription, @DBCopyright
	CLOSE Cur 
	DEALLOCATE Cur

	-- NULL is not equal some string (FALSE)
	IF(@DBDescription <> @Description OR (@DBDescription IS NULL AND @Description IS NOT NULL) OR (@DBDescription IS NOT NULL AND @Description IS NULL))
	BEGIN
		INSERT INTO [dbo].DataSourcesHistory(ID, Uri, FullClrTypeName, Description, Copyright)
		VALUES (@DBID, @DBUri, @DBFullClrTypeName, @Description, @DBCopyright)
	END
GO
PRINT N'Update complete.';


GO
